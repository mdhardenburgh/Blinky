<?xml version="1.0" encoding="UTF-8"?>
<package xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="PACK.xsd" schemaVersion="1.4">
  <name>LPC51U68_DFP</name>
  <vendor>NXP</vendor>
  <description>Device Family Pack for LPC51U68</description>
  <url>http://mcuxpresso.nxp.com/cmsis_pack/repo/</url>
  <license>Licenses.txt</license>
  <releases>
    <release version="12.0.0" date="2019-06-10">NXP CMSIS packs based on MCUXpresso SDK 2.6.0</release>
    <release version="11.0.1" date="2019-04-26">Removed invalid entries from Software Content Register</release>
    <release version="11.0.0" date="2018-12-19">NXP CMSIS packs based on MCUXpresso SDK 2.5.0</release>
    <release version="10.0.1" date="2018-07-26">A problem with missing debug config options, which caused invalid ROM table error when using MDK IDE CMSIS-DAP debugging tool was fixed (KEX-4724).</release>
    <release version="10.0.0" date="2018-05-09">First version of the LPC51U68 device family pack</release>
  </releases>
  <keywords>
    <keyword>Device Family Pack</keyword>
  </keywords>
  <taxonomy>
    <description Cclass="Board Support" Cgroup="SDK Project Template">NXP MCUXpresso SDK Project Template</description>
    <description Cclass="Device" Cgroup="SDK Project Template">NXP MCUXpresso SDK RTE Device Project Template</description>
    <description Cclass="Device" Cgroup="SDK Drivers">NXP MCUXpresso SDK Peripheral Drivers</description>
    <description Cclass="Device" Cgroup="SDK Utilities">NXP MCUXpresso SDK Utilities</description>
    <description Cclass="Device" Cgroup="Startup">NXP MCUXpresso SDK Start up</description>
    <description Cclass="CMSIS Driver">NXP MCUXpresso SDK Peripheral CMSIS Drivers</description>
  </taxonomy>
  <devices>
    <family Dfamily="LPC51U68" Dvendor="NXP:11">
      <description>The LPC51U68 are ARM Cortex-M0+ based microcontrollers for embedded applications.These devices include 96 KB of on-chip SRAM, 256 KB on-chip flash, full-speed USB device interface, and I2S, three general-purpose timers, one versatile timer with PWM and many other capabilities (SCTimer/PWM), one RTC/alarm timer, one 24-bit Multi-Rate Timer (MRT), a Windowed Watchdog Timer (WWDT), eight flexible serial communication peripherals (each of which can be a USART, SPIs, or I2C interface), and one 12-bit 5.0 Msps ADC, and a temperature sensor. The ARM Cortex-M0+ coprocessor available on some devices is an energy-efficient and easy-to-use 32-bit core which is code- and tool-compatible with the core. The Cortex-M0+ coprocessor offers up to 100 MHz performance with a simple instruction set and reduced code size.</description>
      <device Dname="LPC51U68">
        <processor Dcore="Cortex-M0+" Dfpu="NO_FPU" Dendian="Little-endian" Dclock="100000000"/>
        <environment name="iar">
          <file category="linkerfile" name="iar/LPC51U68_flash.icf"/>
        </environment>
        <environment name="uv">
          <postBuild1>$K/ARM/BIN/ElfDwT.exe !L BASEADDRESS(0x0)</postBuild1>
          <postRun1>1</postRun1>
        </environment>
        <sequences>
          <sequence name="ForceCoreHalt">
            <block>
      __var SCS_Addr   = 0xE000E000;
      __var AIRCR_Addr = SCS_Addr + 0xD0C;
      __var DHCSR_Addr = SCS_Addr + 0xDF0;
      __var DCRSR_Addr = SCS_Addr + 0xDF4;
      __var DCRDR_Addr = SCS_Addr + 0xDF8;
      __var DHCSR_Val  = 0;
    </block>
            <control while="((DHCSR_Val = Read32(DHCSR_Addr)) &amp; 0x00020000) == 0" timeout="100000"/>
            <control if="(DHCSR_Val &amp; 0x00020000) == 0">
              <block info="Halt core">
        Write32(DHCSR_Addr,0xA05F0003);                                  // halt core
      </block>
              <control while="(Read32(DHCSR_Addr) &amp; 0x00020000) == 0" timeout="1000"/>
            </control>
          </sequence>
          <sequence name="ResetSystem" info="SYSRESETREQ">
            <block>
      __var SCS_Addr   = 0xE000E000;
      __var AIRCR_Addr = SCS_Addr + 0xD0C;
      __var DHCSR_Addr = SCS_Addr + 0xDF0;

      __errorcontrol = 1;                                              // ignore errors
      Write32(AIRCR_Addr, 0x05FA0004);                                 // Execute SYSRESETREQ via AIRCR
      __errorcontrol = 0;                                              // check errors

      DAP_Delay(1000);                                                 // time for reset
    </block>
            <control while="(Read32(DHCSR_Addr) &amp; 0x02000000) == 0" timeout="100000"/>
            <block>
      Sequence("ForceCoreHalt");                                       // halt the core
    </block>
          </sequence>
          <sequence name="ResetProcessor" info="VECTRESET" disable="true">
  </sequence>
          <sequence name="ResetHardware" info="HW RESET">
            <block>
      __var nReset      = 0x80;
      __var canReadPins = 0;

      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);     // Deassert nRESET line
    </block>
            <control while="1" timeout="50000"/>
            <control if="canReadPins">
              <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000"/>
            </control>
            <control if="!canReadPins">
              <block>
        DAP_SWJ_Pins(nReset, nReset, 0);                               // Assert nRESET line
      </block>
              <control while="1" timeout="100000"/>
            </control>
            <block>
      Sequence("ForceCoreHalt");                                       // halt the core
    </block>
          </sequence>
          <sequence name="ResetCatchSet">
            <block>
      __var SCS_Addr   = 0xE000E000;
      __var DHCSR_Addr = SCS_Addr + 0xDF0;
      __var DEMCR_Addr = SCS_Addr + 0xDFC;
      __var value      = 0;
      __var FPB_BKPT_H = 0x80000000;
      __var FPB_BKPT_L = 0x40000000;
      __var FPB_COMP_M = 0x1FFFFFFC;
      __var FPB_KEY    = 0x00000002;
      __var FPB_ENABLE = 0x00000001;
    </block>
            <block>
      value = Read32(DEMCR_Addr);
      Write32(DEMCR_Addr, (value &amp; (~0x00000001)));                // Disable Reset Vector Catch in DEMCR
    </block>
            <block>
      Write32(0x40000000, 0x00000002);                                 // Map Flash to Vectors
      value = Read32 (0x00000004);                                     // Read Reset Vector

      value = ((value &amp; 0x02) ? FPB_BKPT_H : FPB_BKPT_L) | (value &amp; FPB_COMP_M) | FPB_ENABLE ;
      Write32(0xE0002008, value);                                      // Set BP0 to Reset Vector
      Write32(0xE0002000, (FPB_KEY | FPB_ENABLE));                     // Enable FPB
    </block>
            <block>
      Read32(DHCSR_Addr);                                              // Read DHCSR to clear potentially set DHCSR.S_RESET_ST bit
    </block>
          </sequence>
          <sequence name="ResetCatchClear">
            <block>
      __var SCS_Addr   = 0xE000E000;
      __var DEMCR_Addr = SCS_Addr + 0xDFC;
      __var value      = 0;

      value = Read32(DEMCR_Addr);
      Write32(DEMCR_Addr, (value &amp; (~0x00000001)));                // Disable Reset Vector Catch in DEMCR

      Write32(0xE0002008, 0x00000000);                                 // Clear BP0
      Write32(0xE0002000, 0x00000002);                                 // Disable FPB
    </block>
          </sequence>
        </sequences>
        <memory name="PROGRAM_FLASH" start="0x00000000" size="0x040000" access="rx" default="1" startup="1"/>
        <memory name="SRAM0" start="0x20000000" size="0x010000" access="rw" default="1"/>
        <memory name="SRAMX" start="0x04000000" size="0x8000" access="rw"/>
        <algorithm name="arm/LPC51U68_256.FLM" start="0x00000000" size="0x00040000" RAMstart="0x20000000" RAMsize="0x00001000" default="1"/>
        <debug svd="LPC51U68.xml" __dp="0" __ap="1"/>
        <variant Dvariant="LPC51U68JBD64">
          <compile header="fsl_device_registers.h" define="CPU_LPC51U68JBD64"/>
          <environment name="uv">
            <CMisc>--C99</CMisc>
            <LMisc>--scatter "./RTE/Device/LPC51U68JBD64/LPC51U68_flash.scf"</LMisc>
          </environment>
        </variant>
        <variant Dvariant="LPC51U68JBD48">
          <compile header="fsl_device_registers.h" define="CPU_LPC51U68JBD48"/>
          <environment name="uv">
            <CMisc>--C99</CMisc>
            <LMisc>--scatter "./RTE/Device/LPC51U68JBD48/LPC51U68_flash.scf"</LMisc>
          </environment>
        </variant>
      </device>
    </family>
  </devices>
  <conditions>
    <condition id="cond_MCUXpressoConfigTools">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>
    <condition id="device.LPC51U68_AND_component.serial_manager_uart_AND_component.usart_adapter_AND_device.LPC51U68_startup_AND_driver.clock_AND_driver.common_AND_driver.flexcomm_AND_driver.flexcomm_usart_AND_driver.lpc_gpio_AND_driver.lpc_iocon_AND_driver.power_AND_utility.assert_AND_utility.debug_console">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="usart"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="usart_adapter"/>
      <require Cclass="Device" Cgroup="Startup" Csub="LPC51U68_startup"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="flexcomm"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="iocon"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="gpio"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="assert"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="debug_console"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="serial_manager_uart"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="clock"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="power"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.lpc_dma">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="dma"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.common">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.common_AND_driver.ctimer">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="ctimer"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.common_AND_driver.flexcomm_i2c">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="i2c"/>
    </condition>
    <condition id="device.LPC51U68_AND_component.lists_AND_driver.common">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="lists"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.flexcomm_usart">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="usart"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.common_AND_driver.flexcomm_AND_driver.flexcomm_usart">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="usart"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="flexcomm"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.codec_AND_driver.wm8904">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="wm8904"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="codec"/>
    </condition>
    <condition id="device.LPC51U68_AND_CMSIS_Include_core_cm0plus">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>
    <condition id="mdk">
      <require Tcompiler="ARMCC"/>
    </condition>
    <condition id="iar">
      <require Tcompiler="IAR"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.common_AND_driver.power">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="power"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
    </condition>
    <condition id="device.LPC51U68_AND_CMSIS_Driver_Include.I2C_AND_RTE_Device_AND_driver.flexcomm_i2c_dma">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="i2c_dma"/>
      <require Cclass="CMSIS Driver" Cgroup="I2C" Capiversion="2.3.0"/>
      <require Cclass="Device" Cgroup="SDK Project Template" Csub="RTE_Device"/>
    </condition>
    <condition id="device.LPC51U68_AND_CMSIS_Driver_Include.SPI_AND_RTE_Device_AND_driver.flexcomm_spi_dma">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="spi_dma"/>
      <require Cclass="CMSIS Driver" Cgroup="SPI" Capiversion="2.2.0"/>
      <require Cclass="Device" Cgroup="SDK Project Template" Csub="RTE_Device"/>
    </condition>
    <condition id="device.LPC51U68_AND_CMSIS_Driver_Include.USART_AND_RTE_Device_AND_driver.flexcomm_usart_dma">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="usart_dma"/>
      <require Cclass="CMSIS Driver" Cgroup="USART" Capiversion="2.3.0"/>
      <require Cclass="Device" Cgroup="SDK Project Template" Csub="RTE_Device"/>
    </condition>
    <condition id="device.LPC51U68_AND_device.LPC51U68_CMSIS_AND_driver.clock_AND_driver.reset">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="clock"/>
      <require Cclass="Device" Cgroup="Startup" Csub="LPC51U68_startup"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="reset"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.common_AND_driver.flexcomm">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="flexcomm"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.common_AND_driver.flexcomm_AND_driver.flexcomm_i2c_AND_driver.lpc_dma">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="flexcomm"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="i2c"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="dma"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.flexcomm_i2s_AND_driver.lpc_dma">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="flexcomm_i2s"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="dma"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.flexcomm_AND_driver.flexcomm_spi_AND_driver.lpc_dma">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="flexcomm"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="spi"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="dma"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.flexcomm">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="flexcomm"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.flexcomm_AND_driver.flexcomm_usart_AND_driver.lpc_dma">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="flexcomm"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="usart"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="dma"/>
    </condition>
    <condition id="device.LPC51U68_AND_CMSIS_Driver_Include.I2C">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="CMSIS Driver" Cgroup="I2C" Capiversion="2.3.0"/>
    </condition>
    <condition id="device.LPC51U68_AND_driver.common_AND_driver.inputmux_connections">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="inputmux_connections"/>
    </condition>
    <condition id="device.LPC51U68_AND_component.codec_i2c_AND_driver.common">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="codec_i2c"/>
    </condition>
    <condition id="device.LPC51U68_AND_utility.debug_console">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="debug_console"/>
    </condition>
    <condition id="device.LPC51U68_AND_component.serial_manager_AND_driver.common">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="serial_manager"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
    </condition>
    <condition id="device.LPC51U68_AND_component.lists_AND_driver.common_AND_utility.debug_console">
      <accept Dname="LPC51U68*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="debug_console"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="lists"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
    </condition>
  </conditions>
  <components>
    <component Cclass="Board Support" Cgroup="SDK Project Template" Csub="project_template" Cvariant="LPC51U68" Cversion="1.0.0" condition="device.LPC51U68_AND_component.serial_manager_uart_AND_component.usart_adapter_AND_device.LPC51U68_startup_AND_driver.clock_AND_driver.common_AND_driver.flexcomm_AND_driver.flexcomm_usart_AND_driver.lpc_gpio_AND_driver.lpc_iocon_AND_driver.power_AND_utility.assert_AND_utility.debug_console" isDefaultVariant="1">
      <description/>
      <files>
        <file category="sourceC" attr="config" name="project_template/board.c"/>
        <file category="header" attr="config" name="project_template/board.h"/>
        <file category="sourceC" attr="config" name="project_template/clock_config.c"/>
        <file category="header" attr="config" name="project_template/clock_config.h"/>
        <file category="sourceC" attr="config" name="project_template/peripherals.c"/>
        <file category="header" attr="config" name="project_template/peripherals.h"/>
        <file category="sourceC" attr="config" name="project_template/pin_mux.c"/>
        <file category="header" attr="config" name="project_template/pin_mux.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Project Template" Csub="RTE_Device" Cversion="1.0.0" condition="device.LPC51U68_AND_driver.lpc_dma">
      <description/>
      <files>
        <file category="header" attr="config" name="template/RTE_Device.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="codec_i2c" Cversion="2.1.0" condition="device.LPC51U68_AND_driver.common">
      <description/>
      <files>
        <file category="sourceC" name="components/codec/i2c/fsl_codec_i2c.c"/>
        <file category="header" name="components/codec/i2c/fsl_codec_i2c.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="ctimer_adapter" Cversion="1.0.0" condition="device.LPC51U68_AND_driver.common_AND_driver.ctimer">
      <description/>
      <files>
        <file category="sourceC" name="components/timer/ctimer_adapter.c"/>
        <file category="header" name="components/timer/timer.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="flexcomm_i2c_adapter" Cversion="1.0.0" condition="device.LPC51U68_AND_driver.common_AND_driver.flexcomm_i2c">
      <description/>
      <files>
        <file category="sourceC" name="components/i2c/flexcomm_i2c_adapter.c"/>
        <file category="header" name="components/i2c/i2c.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="lists" Cversion="1.0.0" condition="device.LPC51U68_AND_driver.common">
      <description/>
      <files>
        <file category="sourceC" name="components/lists/generic_list.c"/>
        <file category="header" name="components/lists/generic_list.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Utilities" Csub="serial_manager" Cversion="1.0.0" condition="device.LPC51U68_AND_component.lists_AND_driver.common">
      <description/>
      <files>
        <file category="sourceC" name="components/serial_manager/serial_manager.c"/>
        <file category="header" name="components/serial_manager/serial_manager.h"/>
        <file category="header" name="components/serial_manager/serial_port_internal.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Utilities" Csub="serial_manager_uart" Cversion="1.0.0" condition="device.LPC51U68_AND_driver.flexcomm_usart">
      <description/>
      <files>
        <file category="sourceC" name="components/serial_manager/serial_port_uart.c"/>
        <file category="header" name="components/serial_manager/serial_port_uart.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="usart_adapter" Cversion="1.0.0" condition="device.LPC51U68_AND_driver.common_AND_driver.flexcomm_AND_driver.flexcomm_usart">
      <description/>
      <files>
        <file category="header" name="components/uart/uart.h"/>
        <file category="sourceC" name="components/uart/usart_adapter.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="wm8904_adapter" Cversion="2.1.0" condition="device.LPC51U68_AND_driver.codec_AND_driver.wm8904">
      <description/>
      <files>
        <file category="sourceC" name="components/codec/port/wm8904/fsl_codec_adapter.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="Startup" Csub="LPC51U68_startup" Cversion="1.0.0" condition="device.LPC51U68_AND_CMSIS_Include_core_cm0plus">
      <description/>
      <files>
        <file condition="mdk" category="sourceAsm" attr="config" name="arm/startup_LPC51U68.s"/>
        <file condition="iar" category="sourceAsm" attr="config" name="iar/startup_LPC51U68.s"/>
        <file condition="mdk" category="linkerScript" attr="config" name="arm/LPC51U68_flash.scf"/>
        <file condition="mdk" category="linkerScript" attr="config" name="arm/LPC51U68_ram.scf"/>
        <file condition="iar" category="linkerScript" attr="config" name="iar/LPC51U68_flash.icf"/>
        <file condition="iar" category="linkerScript" attr="config" name="iar/LPC51U68_ram.icf"/>
        <file category="header" attr="config" name="LPC51U68.h"/>
        <file category="header" attr="config" name="LPC51U68_features.h"/>
        <file category="header" attr="config" name="fsl_device_registers.h"/>
        <file category="sourceC" attr="config" name="system_LPC51U68.c"/>
        <file category="header" attr="config" name="system_LPC51U68.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="clock" Cversion="2.1.0" condition="device.LPC51U68_AND_driver.common_AND_driver.power">
      <description>Clock Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_clock.c"/>
        <file category="header" name="drivers/fsl_clock.h"/>
      </files>
    </component>
    <component Cclass="CMSIS Driver" Cgroup="I2C" Csub="flexcomm_i2c_cmsis" Cversion="2.0.0" condition="device.LPC51U68_AND_CMSIS_Driver_Include.I2C_AND_RTE_Device_AND_driver.flexcomm_i2c_dma">
      <description>I2C CMSIS Driver</description>
      <files>
        <file category="sourceC" name="cmsis_drivers/fsl_i2c_cmsis.c"/>
        <file category="header" name="cmsis_drivers/fsl_i2c_cmsis.h"/>
      </files>
    </component>
    <component Cclass="CMSIS Driver" Cgroup="SPI" Csub="flexcomm_spi_cmsis" Cversion="2.0.0" condition="device.LPC51U68_AND_CMSIS_Driver_Include.SPI_AND_RTE_Device_AND_driver.flexcomm_spi_dma">
      <description>SPI CMSIS Driver</description>
      <files>
        <file category="sourceC" name="cmsis_drivers/fsl_spi_cmsis.c"/>
        <file category="header" name="cmsis_drivers/fsl_spi_cmsis.h"/>
      </files>
    </component>
    <component Cclass="CMSIS Driver" Cgroup="USART" Csub="flexcomm_usart_cmsis" Cversion="2.0.0" condition="device.LPC51U68_AND_CMSIS_Driver_Include.USART_AND_RTE_Device_AND_driver.flexcomm_usart_dma">
      <description>USART CMSIS Driver</description>
      <files>
        <file category="sourceC" name="cmsis_drivers/fsl_usart_cmsis.c"/>
        <file category="header" name="cmsis_drivers/fsl_usart_cmsis.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="codec" Cversion="2.1.0" condition="device.LPC51U68_AND_driver.common">
      <description/>
      <files>
        <file category="sourceC" name="components/codec/fsl_codec_common.c"/>
        <file category="header" name="components/codec/fsl_codec_common.h"/>
        <file category="header" name="components/codec/port/fsl_codec_adapter.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="common" Cversion="2.1.0" condition="device.LPC51U68_AND_device.LPC51U68_CMSIS_AND_driver.clock_AND_driver.reset">
      <description>COMMON Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_common.c"/>
        <file category="header" name="drivers/fsl_common.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="ctimer" Cversion="2.0.2" condition="device.LPC51U68_AND_driver.common">
      <description>CTimer Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_ctimer.c"/>
        <file category="header" name="drivers/fsl_ctimer.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="flashiap" Cversion="2.0.0" condition="device.LPC51U68_AND_driver.common">
      <description>FLASHIAP Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_flashiap.c"/>
        <file category="header" name="drivers/fsl_flashiap.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="flexcomm" Cversion="2.0.1" condition="device.LPC51U68_AND_driver.common">
      <description>FLEXCOMM Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_flexcomm.c"/>
        <file category="header" name="drivers/fsl_flexcomm.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="i2c" Cversion="2.0.6" condition="device.LPC51U68_AND_driver.common_AND_driver.flexcomm">
      <description>I2C Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_i2c.c"/>
        <file category="header" name="drivers/fsl_i2c.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="i2c_dma" Cversion="2.0.6" condition="device.LPC51U68_AND_driver.common_AND_driver.flexcomm_AND_driver.flexcomm_i2c_AND_driver.lpc_dma">
      <description>I2C Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_i2c_dma.c"/>
        <file category="header" name="drivers/fsl_i2c_dma.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="flexcomm_i2s" Cversion="2.1.0" condition="device.LPC51U68_AND_driver.common_AND_driver.flexcomm">
      <description>I2S Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_i2s.c"/>
        <file category="header" name="drivers/fsl_i2s.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="flexcomm_i2s_dma" Cversion="2.1.0" condition="device.LPC51U68_AND_driver.flexcomm_i2s_AND_driver.lpc_dma">
      <description>I2S Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_i2s_dma.c"/>
        <file category="header" name="drivers/fsl_i2s_dma.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="spi" Cversion="2.0.4" condition="device.LPC51U68_AND_driver.common_AND_driver.flexcomm">
      <description>SPI Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_spi.c"/>
        <file category="header" name="drivers/fsl_spi.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="spi_dma" Cversion="2.0.4" condition="device.LPC51U68_AND_driver.flexcomm_AND_driver.flexcomm_spi_AND_driver.lpc_dma">
      <description>SPI Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_spi_dma.c"/>
        <file category="header" name="drivers/fsl_spi_dma.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="usart" Cversion="2.1.0" condition="device.LPC51U68_AND_driver.flexcomm">
      <description>USART Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_usart.c"/>
        <file category="header" name="drivers/fsl_usart.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="usart_dma" Cversion="2.1.0" condition="device.LPC51U68_AND_driver.flexcomm_AND_driver.flexcomm_usart_AND_driver.lpc_dma">
      <description>USART Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_usart_dma.c"/>
        <file category="header" name="drivers/fsl_usart_dma.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="fmeas" Cversion="2.1.0" condition="device.LPC51U68_AND_driver.common">
      <description>FMEAS Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_fmeas.c"/>
        <file category="header" name="drivers/fsl_fmeas.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="ft5406" Cversion="1.0.0" condition="device.LPC51U68_AND_driver.common">
      <description/>
      <files>
        <file category="sourceC" name="components/ft5406/fsl_ft5406.c"/>
        <file category="header" name="components/ft5406/fsl_ft5406.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="ft6x06" Cversion="1.0.0" condition="device.LPC51U68_AND_CMSIS_Driver_Include.I2C">
      <description/>
      <files>
        <file category="sourceC" name="components/ft6x06/fsl_ft6x06.c"/>
        <file category="header" name="components/ft6x06/fsl_ft6x06.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="gint" Cversion="2.0.1" condition="device.LPC51U68_AND_driver.common">
      <description>GINT Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_gint.c"/>
        <file category="header" name="drivers/fsl_gint.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="iap" Cversion="2.0.2" condition="device.LPC51U68_AND_driver.common">
      <description>IAP Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_iap.c"/>
        <file category="header" name="drivers/fsl_iap.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="ili9341" Cversion="1.0.0" condition="device.LPC51U68_AND_driver.common">
      <description/>
      <files>
        <file category="sourceC" name="components/ili9341/fsl_ili9341.c"/>
        <file category="header" name="components/ili9341/fsl_ili9341.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="inputmux" Cversion="2.0.0" condition="device.LPC51U68_AND_driver.common_AND_driver.inputmux_connections">
      <description>INPUTMUX Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_inputmux.c"/>
        <file category="header" name="drivers/fsl_inputmux.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="inputmux_connections" Cversion="2.0.1" condition="device.LPC51U68_AND_driver.common">
      <description>Inputmux_connections Driver</description>
      <files>
        <file category="header" name="drivers/fsl_inputmux_connections.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="adc" Cversion="2.3.1" condition="device.LPC51U68_AND_driver.common">
      <description>ADC Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_adc.c"/>
        <file category="header" name="drivers/fsl_adc.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="lpc_crc" Cversion="2.0.1" condition="device.LPC51U68_AND_driver.common">
      <description>CRC Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_crc.c"/>
        <file category="header" name="drivers/fsl_crc.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="dma" Cversion="2.3.0" condition="device.LPC51U68_AND_driver.common">
      <description>DMA Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_dma.c"/>
        <file category="header" name="drivers/fsl_dma.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="gpio" Cversion="2.1.4" condition="device.LPC51U68_AND_driver.common">
      <description>GPIO Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_gpio.c"/>
        <file category="header" name="drivers/fsl_gpio.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="iocon" Cversion="2.1.1" condition="device.LPC51U68_AND_driver.common">
      <description>IOCON Driver</description>
      <files>
        <file category="header" name="drivers/fsl_iocon.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="lpc_rtc" Cversion="2.0.0" condition="device.LPC51U68_AND_driver.common">
      <description>RTC Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_rtc.c"/>
        <file category="header" name="drivers/fsl_rtc.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="mrt" Cversion="2.0.1" condition="device.LPC51U68_AND_driver.common">
      <description>MRT Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_mrt.c"/>
        <file category="header" name="drivers/fsl_mrt.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="pint" Cversion="2.1.3" condition="device.LPC51U68_AND_driver.common">
      <description>PINT Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_pint.c"/>
        <file category="header" name="drivers/fsl_pint.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="power" Cversion="1.0.0" condition="device.LPC51U68_AND_driver.common_AND_driver.power">
      <description>Power driver</description>
      <files>
        <file condition="mdk" category="library" name="arm/keil_lib_power.lib"/>
        <file category="sourceC" name="drivers/fsl_power.c"/>
        <file category="header" name="drivers/fsl_power.h"/>
        <file condition="iar" category="library" name="iar/iar_lib_power.a"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="reset" Cversion="2.0.1" condition="device.LPC51U68_AND_driver.common">
      <description>Reset Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_reset.c"/>
        <file category="header" name="drivers/fsl_reset.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="sctimer" Cversion="2.1.0" condition="device.LPC51U68_AND_driver.common">
      <description>SCT Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_sctimer.c"/>
        <file category="header" name="drivers/fsl_sctimer.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="utick" Cversion="2.0.2" condition="device.LPC51U68_AND_driver.common">
      <description>UTICK Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_utick.c"/>
        <file category="header" name="drivers/fsl_utick.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="wm8904" Cversion="2.1.0" condition="device.LPC51U68_AND_component.codec_i2c_AND_driver.common">
      <description/>
      <files>
        <file category="sourceC" name="components/codec/wm8904/fsl_wm8904.c"/>
        <file category="header" name="components/codec/wm8904/fsl_wm8904.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="wwdt" Cversion="2.1.2" condition="device.LPC51U68_AND_driver.common">
      <description>WWDT Driver</description>
      <files>
        <file category="sourceC" name="drivers/fsl_wwdt.c"/>
        <file category="header" name="drivers/fsl_wwdt.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Utilities" Csub="assert" Cversion="1.0.0" condition="device.LPC51U68_AND_utility.debug_console">
      <description/>
      <files>
        <file category="sourceC" name="utilities/fsl_assert.c"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Utilities" Csub="debug_console" Cversion="1.0.0" condition="device.LPC51U68_AND_component.serial_manager_AND_driver.common">
      <description/>
      <files>
        <file category="sourceC" name="utilities/debug_console/fsl_debug_console.c"/>
        <file category="header" name="utilities/debug_console/fsl_debug_console.h"/>
        <file category="header" name="utilities/debug_console/fsl_debug_console_conf.h"/>
        <file category="sourceC" name="utilities/str/fsl_str.c"/>
        <file category="header" name="utilities/str/fsl_str.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Utilities" Csub="notifier" Cversion="1.0.0" condition="device.LPC51U68_AND_driver.common">
      <description/>
      <files>
        <file category="sourceC" name="utilities/fsl_notifier.c"/>
        <file category="header" name="utilities/fsl_notifier.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Utilities" Csub="shell" Cversion="1.0.0" condition="device.LPC51U68_AND_component.lists_AND_driver.common_AND_utility.debug_console">
      <description/>
      <files>
        <file category="sourceC" name="utilities/fsl_shell.c"/>
        <file category="header" name="utilities/fsl_shell.h"/>
      </files>
    </component>
  </components>
</package>
