<?xml version="1.0" encoding="UTF-8"?>
<package xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="PACK.xsd" schemaVersion="1.4">
  <name>FRDM-K32L3A6_BSP</name>
  <vendor>NXP</vendor>
  <description>Board Support Pack for FRDMK32L3A6</description>
  <url>http://mcuxpresso.nxp.com/cmsis_pack/repo/</url>
  <license>Licenses.txt</license>
  <releases>
    <release version="12.0.0" date="2019-08-16">NXP CMSIS packs based on MCUXpresso SDK 2.6.0</release>
  </releases>
  <keywords>
    <keyword>Board Support Pack</keyword>
  </keywords>
  <boards>
    <board vendor="NXP" name="FRDM-K32L3A6">
      <description>FRDM-K32L3A6: Freedom Development Platform for Kinetis K32L3A60 MCUs</description>
      <mountedDevice Dname="K32L3A60xxx" Dvendor="NXP:11"/>
    </board>
  </boards>
  <conditions>
    <condition id="device.K32L3A60_AND_component.lpuart_adapter_AND_component.serial_manager_uart_AND_device.K32L3A60_startup_AND_driver.clock_AND_driver.common_AND_driver.gpio_AND_driver.lpuart_AND_driver.msmc_AND_driver.port_AND_utility.assert_AND_utility.debug_console">
      <accept Dname="K32L3A60???*" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="assert"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="debug_console"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="serial_manager_uart"/>
      <require Cclass="Device" Cgroup="Startup"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="clock"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="gpio"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="port"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="lpuart"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="lpuart_adapter"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="msmc"/>
    </condition>
  </conditions>
  <examples>
    <example name="bubble_cm0plus" folder="demo_apps/bubble/cm0plus" doc="readme.txt">
      <description>The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/bubble_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/bubble_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cau3_cm0plus" folder="driver_examples/cau3/cm0plus" doc="readme.txt">
      <description>The CAU3 Example project is a demonstration program that uses the KSDK software implementseveral cryptography algorithms using the CAU3 software driver.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cau3_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/cau3_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpi2c_edma_b2b_transfer_master_cm0plus" folder="cmsis_driver_examples/lpi2c/edma_b2b_transfer/master/cm0plus" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpi2c_edma_b2b_transfer_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpi2c_edma_b2b_transfer_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpi2c_edma_b2b_transfer_slave_cm0plus" folder="cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave/cm0plus" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpi2c_edma_b2b_transfer_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpi2c_edma_b2b_transfer_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpi2c_int_b2b_transfer_master_cm0plus" folder="cmsis_driver_examples/lpi2c/int_b2b_transfer/master/cm0plus" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpi2c_int_b2b_transfer_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpi2c_int_b2b_transfer_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpi2c_int_b2b_transfer_slave_cm0plus" folder="cmsis_driver_examples/lpi2c/int_b2b_transfer/slave/cm0plus" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpi2c_int_b2b_transfer_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpi2c_int_b2b_transfer_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpspi_edma_b2b_transfer_master_cm0plus" folder="cmsis_driver_examples/lpspi/edma_b2b_transfer/master/cm0plus" doc="readme.txt">
      <description>The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . </description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpspi_edma_b2b_transfer_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpspi_edma_b2b_transfer_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpspi_edma_b2b_transfer_slave_cm0plus" folder="cmsis_driver_examples/lpspi/edma_b2b_transfer/slave/cm0plus" doc="readme.txt">
      <description>The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . </description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpspi_edma_b2b_transfer_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpspi_edma_b2b_transfer_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpspi_int_b2b_transfer_master_cm0plus" folder="cmsis_driver_examples/lpspi/int_b2b_transfer/master/cm0plus" doc="readme.txt">
      <description>The cmsis_lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . </description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpspi_int_b2b_transfer_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpspi_int_b2b_transfer_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpspi_int_b2b_transfer_slave_cm0plus" folder="cmsis_driver_examples/lpspi/int_b2b_transfer/slave/cm0plus" doc="readme.txt">
      <description>The lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . </description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpspi_int_b2b_transfer_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpspi_int_b2b_transfer_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpuart_interrupt_transfer_cm0plus" folder="cmsis_driver_examples/lpuart/interrupt_transfer/cm0plus" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpuart_interrupt_transfer_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpuart_interrupt_transfer_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="crc_cm0plus" folder="driver_examples/crc/cm0plus" doc="readme.txt">
      <description>The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/crc_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/crc_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dac_1_basic_cm0plus" folder="driver_examples/dac/dac_basic/cm0plus" doc="readme.txt">
      <description>The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dac_1_basic_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/dac_1_basic_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dac_1_buffer_interrupt_cm0plus" folder="driver_examples/dac/dac_buffer_interrupt/cm0plus" doc="readme.txt">
      <description>The dac_buffer_interrupt example shows how to use DAC FIFO interrupt.When the DAC FIFO empty interrupt is enabled firstly, the application would enter the DAC ISR immediately, since the FIFO is actually empty. Then the FIFO would be feed inside the ISR. Then the DAC interrupt could be restrained. Once the DAC FIFO is triggered in while loop, the data in FIFO is read out, then it becomes empty, so the FIFO would be feed again in DAC ISR. With this example, user can define the DAC output array to generate the different wave output. Also the software trigger can be called in some timer ISR so that the DAC would output the analog signal in indicated period. Or even use the hardware trigger to release the CPU.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dac_1_buffer_interrupt_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/dac_1_buffer_interrupt_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="edma_memory_to_memory_cm0plus" folder="driver_examples/edma/memory_to_memory/cm0plus" doc="readme.txt">
      <description>The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/edma_memory_to_memory_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/edma_memory_to_memory_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="edma_scatter_gather_cm0plus" folder="driver_examples/edma/scatter_gather/cm0plus" doc="readme.txt">
      <description>The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/edma_scatter_gather_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/edma_scatter_gather_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ewm_cm0plus" folder="driver_examples/ewm/cm0plus" doc="readme.txt">
      <description>The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ewm_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/ewm_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_i2c_interrupt_lpi2c_transfer_cm0plus" folder="driver_examples/flexio/i2c/interrupt_lpi2c_transfer/cm0plus" doc="readme.txt">
      <description>The flexio_lpi2c_interrupt example shows how to use flexio i2c master  driver in interrupt way:In this example, a flexio simulated i2c master connect to a LPI2C slave</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_i2c_interrupt_lpi2c_transfer_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/flexio_i2c_interrupt_lpi2c_transfer_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_i2c_read_accel_value_transfer_cm0plus" folder="driver_examples/flexio/i2c/read_accel_value_transfer/cm0plus" doc="readme.txt">
      <description>The flexio_i2c_read_accel_value example shows how to use FLEXIO I2C  Master driver to communicate with an i2c device: 1. How to use the flexio i2c master driver to read a i2c device who_am_I register. 2. How to use the flexio i2c master driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_i2c_read_accel_value_transfer_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/flexio_i2c_read_accel_value_transfer_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_pwm_cm0plus" folder="driver_examples/flexio/pwm/cm0plus" doc="readme.txt">
      <description>This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by "DEMO_FLEXIO_FREQUENCY" in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_pwm_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/flexio_pwm_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_spi_edma_lpspi_transfer_master_cm0plus" folder="driver_examples/flexio/spi/edma_lpspi_transfer/master/cm0plus" doc="readme.txt">
      <description>The flexio_spi_master_edma_lpspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a lpspi slave .</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_spi_edma_lpspi_transfer_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/flexio_spi_edma_lpspi_transfer_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_spi_edma_lpspi_transfer_slave_cm0plus" folder="driver_examples/flexio/spi/edma_lpspi_transfer/slave/cm0plus" doc="readme.txt">
      <description>The flexio_spi_slave_edma_lpspi_master example shows how to use flexio spi slave driver in edma way:In this example, a flexio simulated slave connect to a lpspi master.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_spi_edma_lpspi_transfer_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/flexio_spi_edma_lpspi_transfer_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_spi_int_lpspi_transfer_master_cm0plus" folder="driver_examples/flexio/spi/int_lpspi_transfer/master/cm0plus" doc="readme.txt">
      <description>The flexio_spi_master_interrupt_lpspi_slave example shows how to use flexio spi master driver in interrupt way. In this example, a flexio simulated master connect to a lpspi slave .</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_spi_int_lpspi_transfer_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/flexio_spi_int_lpspi_transfer_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_spi_int_lpspi_transfer_slave_cm0plus" folder="driver_examples/flexio/spi/int_lpspi_transfer/slave/cm0plus" doc="readme.txt">
      <description>The flexio_spi_slave_interrupt_lpspi_master example shows how to use flexio spi slave driver in interrupt way. In this example, a flexio simulated slave connect to a lpspi master.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_spi_int_lpspi_transfer_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/flexio_spi_int_lpspi_transfer_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_uart_edma_transfer_cm0plus" folder="driver_examples/flexio/uart/edma_transfer/cm0plus" doc="readme.txt">
      <description>The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_uart_edma_transfer_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/flexio_uart_edma_transfer_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_uart_int_rb_transfer_cm0plus" folder="driver_examples/flexio/uart/int_rb_transfer/cm0plus" doc="readme.txt">
      <description>The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_uart_int_rb_transfer_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/flexio_uart_int_rb_transfer_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_uart_interrupt_transfer_cm0plus" folder="driver_examples/flexio/uart/interrupt_transfer/cm0plus" doc="readme.txt">
      <description>The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_uart_interrupt_transfer_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/flexio_uart_interrupt_transfer_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_uart_polling_transfer_cm0plus" folder="driver_examples/flexio/uart/polling_transfer/cm0plus" doc="readme.txt">
      <description>The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_uart_polling_transfer_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/flexio_uart_polling_transfer_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="gpio_input_interrupt_cm0plus" folder="driver_examples/gpio/input_interrupt/cm0plus" doc="readme.txt">
      <description>The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/gpio_input_interrupt_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/gpio_input_interrupt_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="gpio_led_output_cm0plus" folder="driver_examples/gpio/led_output/cm0plus" doc="readme.txt">
      <description>The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/gpio_led_output_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/gpio_led_output_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="hello_world_demo_cm0plus" folder="demo_apps/hello_world/cm0plus" doc="readme.txt">
      <description>The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the "Hello World" string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/hello_world_demo_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/hello_world_demo_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpadc_interrupt_cm0plus" folder="driver_examples/lpadc/interrupt/cm0plus" doc="readme.txt">
      <description>The lpdc_single_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpadc_interrupt_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpadc_interrupt_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpadc_polling_cm0plus" folder="driver_examples/lpadc/polling/cm0plus" doc="readme.txt">
      <description>The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpadc_polling_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpadc_polling_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpcmp_interrupt_cm0plus" folder="driver_examples/lpcmp/interrupt/cm0plus" doc="readme.txt">
      <description>The LPCMP interrupt Example shows how to use interrupt with LPCMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the LPCMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any LPCMP interrupt happens, the LPCMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpcmp_interrupt_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpcmp_interrupt_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpcmp_polling_cm0plus" folder="driver_examples/lpcmp/polling/cm0plus" doc="readme.txt">
      <description>The LPCMP polling Example shows the simplest way to use LPCMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the LPCMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpcmp_polling_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpcmp_polling_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_edma_b2b_transfer_master_cm0plus" folder="driver_examples/lpi2c/edma_b2b_transfer/master/cm0plus" doc="readme.txt">
      <description>The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_edma_b2b_transfer_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_edma_b2b_transfer_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_edma_b2b_transfer_slave_cm0plus" folder="driver_examples/lpi2c/edma_b2b_transfer/slave/cm0plus" doc="readme.txt">
      <description>The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_edma_b2b_transfer_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_edma_b2b_transfer_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_interrupt_cm0plus" folder="driver_examples/lpi2c/interrupt/cm0plus" doc="readme.txt">
      <description>The lpi2c_functional_interrupt example shows how to use lpi2c functional driver to build a interrupt based application:In this example , one lpi2c instance used as lpi2c master and another lpi2c instance used as lpi2c slave .1. lpi2c master send data using interrupt to lpi2c slave in interrupt .2. lpi2c master read data using interrupt from lpi2c slave in interrupt .3. The example assumes that the connection is OK between master and slave, so there's NO error handling code.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_interrupt_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_interrupt_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_interrupt_b2b_transfer_master_cm0plus" folder="driver_examples/lpi2c/interrupt_b2b_transfer/master/cm0plus" doc="readme.txt">
      <description>The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_interrupt_b2b_transfer_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_interrupt_b2b_transfer_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_interrupt_b2b_transfer_slave_cm0plus" folder="driver_examples/lpi2c/interrupt_b2b_transfer/slave/cm0plus" doc="readme.txt">
      <description>The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_interrupt_b2b_transfer_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_interrupt_b2b_transfer_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_polling_b2b_transfer_master_cm0plus" folder="driver_examples/lpi2c/polling_b2b_transfer/master/cm0plus" doc="readme.txt">
      <description>The lpi2c_polling_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_polling_b2b_transfer_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_polling_b2b_transfer_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_polling_b2b_transfer_slave_cm0plus" folder="driver_examples/lpi2c/polling_b2b_transfer/slave/cm0plus" doc="readme.txt">
      <description>The lpi2c_polling_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_polling_b2b_transfer_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_polling_b2b_transfer_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_read_accel_value_transfer_cm0plus" folder="driver_examples/lpi2c/read_accel_value_transfer/cm0plus" doc="readme.txt">
      <description>The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_read_accel_value_transfer_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_read_accel_value_transfer_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpit_cm0plus" folder="driver_examples/lpit/cm0plus" doc="readme.txt">
      <description>The LPIT project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpit_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpit_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_edma_b2b_transfer_master_cm0plus" folder="driver_examples/lpspi/edma_b2b_transfer/master/cm0plus" doc="readme.txt">
      <description>The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_edma_b2b_transfer_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpspi_edma_b2b_transfer_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_edma_b2b_transfer_slave_cm0plus" folder="driver_examples/lpspi/edma_b2b_transfer/slave/cm0plus" doc="readme.txt">
      <description>The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_edma_b2b_transfer_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpspi_edma_b2b_transfer_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_interrupt_cm0plus" folder="driver_examples/lpspi/interrupt/cm0plus" doc="readme.txt">
      <description>The lpspi_functional_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave .1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_interrupt_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpspi_interrupt_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_interrupt_b2b_master_cm0plus" folder="driver_examples/lpspi/interrupt_b2b/master/cm0plus" doc="readme.txt">
      <description>The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_interrupt_b2b_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpspi_interrupt_b2b_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_interrupt_b2b_slave_cm0plus" folder="driver_examples/lpspi/interrupt_b2b/slave/cm0plus" doc="readme.txt">
      <description>The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_interrupt_b2b_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpspi_interrupt_b2b_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_interrupt_b2b_transfer_master_cm0plus" folder="driver_examples/lpspi/interrupt_b2b_transfer/master/cm0plus" doc="readme.txt">
      <description>The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_interrupt_b2b_transfer_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpspi_interrupt_b2b_transfer_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_interrupt_b2b_transfer_slave_cm0plus" folder="driver_examples/lpspi/interrupt_b2b_transfer/slave/cm0plus" doc="readme.txt">
      <description>The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_interrupt_b2b_transfer_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpspi_interrupt_b2b_transfer_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_polling_b2b_transfer_master_cm0plus" folder="driver_examples/lpspi/polling_b2b_transfer/master/cm0plus" doc="readme.txt">
      <description>The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_polling_b2b_transfer_master_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpspi_polling_b2b_transfer_master_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_polling_b2b_transfer_slave_cm0plus" folder="driver_examples/lpspi/polling_b2b_transfer/slave/cm0plus" doc="readme.txt">
      <description>The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_polling_b2b_transfer_slave_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpspi_polling_b2b_transfer_slave_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lptmr_cm0plus" folder="driver_examples/lptmr/cm0plus" doc="readme.txt">
      <description>The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lptmr_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lptmr_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_interrupt_cm0plus" folder="driver_examples/lpuart/interrupt/cm0plus" doc="readme.txt">
      <description>The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_interrupt_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpuart_interrupt_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_interrupt_rb_transfer_cm0plus" folder="driver_examples/lpuart/interrupt_rb_transfer/cm0plus" doc="readme.txt">
      <description>The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_interrupt_rb_transfer_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpuart_interrupt_rb_transfer_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_interrupt_transfer_cm0plus" folder="driver_examples/lpuart/interrupt_transfer/cm0plus" doc="readme.txt">
      <description>The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_interrupt_transfer_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpuart_interrupt_transfer_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_interrupt_transfer_seven_bits_cm0plus" folder="driver_examples/lpuart/interrupt_transfer_seven_bits/cm0plus" doc="readme.txt">
      <description>The lpuart_interrupt_transfer_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.NOTE: Please set com port format to "7 data bits without parity bit" in PC's com port tool</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_interrupt_transfer_seven_bits_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpuart_interrupt_transfer_seven_bits_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_polling_cm0plus" folder="driver_examples/lpuart/polling/cm0plus" doc="readme.txt">
      <description>The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_polling_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpuart_polling_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_polling_seven_bits_cm0plus" folder="driver_examples/lpuart/polling_seven_bits/cm0plus" doc="readme.txt">
      <description>The lpuart_polling_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console instantly.NOTE: Please set com port format to "7 data bits without parity bit" in PC's com port tool</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_polling_seven_bits_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/lpuart_polling_seven_bits_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mmdvsq_cm0plus" folder="driver_examples/mmdvsq/cm0plus" doc="readme.txt">
      <description>The MMDVSQ Example project is a demonstration program that uses the KSDK software to Calculation square root and QuotientMMDVSQ Peripheral Driver ExampleStart MMDVSQ ExampleCalculation square root, please enter radicandSquare root of 9 is 3Calculation division to get remainder and quotientEnter dividend and divisorRemainder of 10 and 5 is 0Quotient of 10 and 5 is 2</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mmdvsq_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/mmdvsq_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mu_interrupt_core1" folder="driver_examples/mu/interrupt/core1" doc="readme.txt">
      <description>The mu_interrupt example shows how to use MU driver in interrupt way:In this example:1. Core 0 send message to Core 1 in interrupt mode via MU module.2. Core 1 send message back to Core 0 in interrupt mode.3. Core 0 receive message sent from Core 1 in interrupt mode.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mu_interrupt_core1.uvprojx"/>
        <environment name="iar" load="iar/mu_interrupt_core1.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mu_polling_core1" folder="driver_examples/mu/polling/core1" doc="readme.txt">
      <description>The mu_polling example shows how to use MU driver in polling way:In this example:1. Core 0 send message to Core 1 in polling mode via MU module.2. Core 1 send message back to Core 0 in polling mode.3. Core 0 receive message sent from Core 1 in polling mode.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mu_polling_core1.uvprojx"/>
        <environment name="iar" load="iar/mu_polling_core1.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="pflash_cm0plus" folder="driver_examples/flash/pflash/cm0plus" doc="readme.txt">
      <description>The pflash example shows how to use flash driver to operate program flash:</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/pflash_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/pflash_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="power_mode_switch_cm0plus" folder="demo_apps/power_mode_switch/cm0plus" doc="readme.txt">
      <description>The IEE IEER MMDC demo application demonstrates usage of the IEE and IEER driver. The Inline Encryption Engine (IEE) together with Inline Encryption Engine Router (IEER) provides a means to perform inline encryption and decryption of information transferred over external memory interfaces. In this demo application encrypted read and write is performed to external DDR Ram using MMDC. At first IEE is configured to perform AES XTS encryprion/decryption using KEY1 &amp; KEY2 for region 3 (highest priority region). Offset setting for region 3 is calculated using IEE_GetOffset() function. IEE uses offset to determine the physical address of the memory location that you are accessing. Offset is added to IEE address when performing read or write access to IEE. Then IEER is set to cover all its address space for region 3. Now all data written/read to/from IEE address will be encrypted/decrypted and written/read to/from physical DDR memory. Then test data are written over IEE to DDR. After the successful write, data are read directly from the DDR (without using IEE) to see that they are crypted. Then read using IEE is performed and the data are compared to written data in the begining of this demo.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/power_mode_switch_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/power_mode_switch_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="rtc_cm0plus" folder="driver_examples/rtc/cm0plus" doc="readme.txt">
      <description>The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/rtc_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/rtc_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="rtc_func_cm0plus" folder="demo_apps/rtc_func/cm0plus" doc="readme.txt">
      <description>The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/rtc_func_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/rtc_func_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="sema42_dual_core_core1" folder="driver_examples/sema42/dual_core/core1" doc="readme.txt">
      <description>The sema42 example shows how to use SEMA42 driver to lock and unlock a sema gate:In this example:1. Firstly, Core 0 turn on LED  and lock a sema gate then boot up Core 1 wake up.2. Core 1 must be wait until Core 0 unlocks this sema gate to lock it.3. After user press any key in terminal window, the sema gate will be unlocked by core 0,then core 1 will lock it and turn off the LEDIf the board does not have LED to show the status, then core 1 will send a flagto core 0 when core 1 has locked the sema gate. Core 0 outputs the success logafter it received the flag.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/sema42_dual_core_core1.uvprojx"/>
        <environment name="iar" load="iar/sema42_dual_core_core1.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="shell_cm0plus" folder="demo_apps/shell/cm0plus" doc="readme.txt">
      <description>The Shell Demo application demonstrates to control Leds by commands.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/shell_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/shell_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_combine_pwm_cm0plus" folder="driver_examples/tpm/combine_pwm/cm0plus" doc="readme.txt">
      <description>The TPM project is a demonstration program of generating a combined PWM signal by the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The example also show's the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the TPM pins, the user will seea change in LED brightness if user enter different values.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_combine_pwm_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/tpm_combine_pwm_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_dual_edge_capture_cm0plus" folder="driver_examples/tpm/dual_edge_capture/cm0plus" doc="readme.txt">
      <description>The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_dual_edge_capture_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/tpm_dual_edge_capture_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_input_capture_cm0plus" folder="driver_examples/tpm/input_capture/cm0plus" doc="readme.txt">
      <description>The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_input_capture_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/tpm_input_capture_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_output_compare_cm0plus" folder="driver_examples/tpm/output_compare/cm0plus" doc="readme.txt">
      <description>The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_output_compare_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/tpm_output_compare_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_pwm_twochannel_cm0plus" folder="driver_examples/tpm/pwm_twochannel/cm0plus" doc="readme.txt">
      <description>The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_pwm_twochannel_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/tpm_pwm_twochannel_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_simple_pwm_cm0plus" folder="driver_examples/tpm/simple_pwm/cm0plus" doc="readme.txt">
      <description>The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_simple_pwm_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/tpm_simple_pwm_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_timer_cm0plus" folder="driver_examples/tpm/timer/cm0plus" doc="readme.txt">
      <description>The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_timer_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/tpm_timer_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="trng_random_cm0plus" folder="driver_examples/trng/random/cm0plus" doc="readme.txt">
      <description>The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/trng_random_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/trng_random_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tstmr_cm0plus" folder="driver_examples/tstmr/cm0plus" doc="readme.txt">
      <description>The tstmr example shows the usage of TSTMR driver in application. The TSTMR module is a free running incrementing counter that starts running after system reset de-assertion and can be read at any time by the software for determining the software ticks.The TSTMR runs off the 1 MHz clock and resets on every system reset.In this example, it would output a time stamp information when the application is ready. And then, delay for 1 second with TSTMR_DelayUs() function. Before and after the delay, it would output the two time stamps information again.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tstmr_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/tstmr_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="xrdc_cm0plus" folder="driver_examples/xrdc/cm0plus" doc="readme.txt">
      <description>The xrdc example shows how to control the memory and peripheral accesspolicy using XRDC.In this example, one peripheral and a memory region are set to unaccessible, thenthe hardfault occurs.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/xrdc_cm0plus.uvprojx"/>
        <environment name="iar" load="iar/xrdc_cm0plus.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="bubble_cm4" folder="demo_apps/bubble/cm4" doc="readme.txt">
      <description>The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/bubble_cm4.uvprojx"/>
        <environment name="iar" load="iar/bubble_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cau3_cm4" folder="driver_examples/cau3/cm4" doc="readme.txt">
      <description>The CAU3 Example project is a demonstration program that uses the KSDK software implementseveral cryptography algorithms using the CAU3 software driver.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cau3_cm4.uvprojx"/>
        <environment name="iar" load="iar/cau3_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpi2c_edma_b2b_transfer_master_cm4" folder="cmsis_driver_examples/lpi2c/edma_b2b_transfer/master/cm4" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpi2c_edma_b2b_transfer_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpi2c_edma_b2b_transfer_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpi2c_edma_b2b_transfer_slave_cm4" folder="cmsis_driver_examples/lpi2c/edma_b2b_transfer/slave/cm4" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpi2c_edma_b2b_transfer_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpi2c_edma_b2b_transfer_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpi2c_int_b2b_transfer_master_cm4" folder="cmsis_driver_examples/lpi2c/int_b2b_transfer/master/cm4" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpi2c_int_b2b_transfer_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpi2c_int_b2b_transfer_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpi2c_int_b2b_transfer_slave_cm4" folder="cmsis_driver_examples/lpi2c/int_b2b_transfer/slave/cm4" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The lpi2c_int_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpi2c_int_b2b_transfer_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpi2c_int_b2b_transfer_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpspi_edma_b2b_transfer_master_cm4" folder="cmsis_driver_examples/lpspi/edma_b2b_transfer/master/cm4" doc="readme.txt">
      <description>The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . </description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpspi_edma_b2b_transfer_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpspi_edma_b2b_transfer_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpspi_edma_b2b_transfer_slave_cm4" folder="cmsis_driver_examples/lpspi/edma_b2b_transfer/slave/cm4" doc="readme.txt">
      <description>The cmsis_lpspi_edma_b2b_transfer example shows how to use LPSPI CMSIS driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . </description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpspi_edma_b2b_transfer_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpspi_edma_b2b_transfer_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpspi_int_b2b_transfer_master_cm4" folder="cmsis_driver_examples/lpspi/int_b2b_transfer/master/cm4" doc="readme.txt">
      <description>The cmsis_lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . </description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpspi_int_b2b_transfer_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpspi_int_b2b_transfer_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpspi_int_b2b_transfer_slave_cm4" folder="cmsis_driver_examples/lpspi/int_b2b_transfer/slave/cm4" doc="readme.txt">
      <description>The lpspi_int_b2b_transfer example shows how to use LPSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'cmsis_lpspi_int_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . </description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpspi_int_b2b_transfer_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpspi_int_b2b_transfer_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpuart_edma_transfer_cm4" folder="cmsis_driver_examples/lpuart/edma_transfer/cm4" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpuart_edma_transfer_cm4.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpuart_edma_transfer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_lpuart_interrupt_transfer_cm4" folder="cmsis_driver_examples/lpuart/interrupt_transfer/cm4" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpuart_interrupt_transfer_cm4.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpuart_interrupt_transfer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="crc_cm4" folder="driver_examples/crc/cm4" doc="readme.txt">
      <description>The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/crc_cm4.uvprojx"/>
        <environment name="iar" load="iar/crc_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dac_1_basic_cm4" folder="driver_examples/dac/dac_basic/cm4" doc="readme.txt">
      <description>The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dac_1_basic_cm4.uvprojx"/>
        <environment name="iar" load="iar/dac_1_basic_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dac_1_buffer_interrupt_cm4" folder="driver_examples/dac/dac_buffer_interrupt/cm4" doc="readme.txt">
      <description>The dac_buffer_interrupt example shows how to use DAC FIFO interrupt.When the DAC FIFO empty interrupt is enabled firstly, the application would enter the DAC ISR immediately, since the FIFO is actually empty. Then the FIFO would be feed inside the ISR. Then the DAC interrupt could be restrained. Once the DAC FIFO is triggered in while loop, the data in FIFO is read out, then it becomes empty, so the FIFO would be feed again in DAC ISR. With this example, user can define the DAC output array to generate the different wave output. Also the software trigger can be called in some timer ISR so that the DAC would output the analog signal in indicated period. Or even use the hardware trigger to release the CPU.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dac_1_buffer_interrupt_cm4.uvprojx"/>
        <environment name="iar" load="iar/dac_1_buffer_interrupt_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dcdc_framework_cm4" folder="demo_apps/dcdc_framework/cm4" doc="readme.txt">
      <description>The SD JPEG Demo application reads the JPEG pictures from the SD card, decodesthem, and shows them in the LCD panel one by one.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dcdc_framework_cm4.uvprojx"/>
        <environment name="iar" load="iar/dcdc_framework_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="edma_memory_to_memory_cm4" folder="driver_examples/edma/memory_to_memory/cm4" doc="readme.txt">
      <description>The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/edma_memory_to_memory_cm4.uvprojx"/>
        <environment name="iar" load="iar/edma_memory_to_memory_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="edma_scatter_gather_cm4" folder="driver_examples/edma/scatter_gather/cm4" doc="readme.txt">
      <description>The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/edma_scatter_gather_cm4.uvprojx"/>
        <environment name="iar" load="iar/edma_scatter_gather_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ewm_cm4" folder="driver_examples/ewm/cm4" doc="readme.txt">
      <description>The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ewm_cm4.uvprojx"/>
        <environment name="iar" load="iar/ewm_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_i2c_interrupt_lpi2c_transfer_cm4" folder="driver_examples/flexio/i2c/interrupt_lpi2c_transfer/cm4" doc="readme.txt">
      <description>The flexio_lpi2c_interrupt example shows how to use flexio i2c master  driver in interrupt way:In this example, a flexio simulated i2c master connect to a LPI2C slave</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_i2c_interrupt_lpi2c_transfer_cm4.uvprojx"/>
        <environment name="iar" load="iar/flexio_i2c_interrupt_lpi2c_transfer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_i2c_read_accel_value_transfer_cm4" folder="driver_examples/flexio/i2c/read_accel_value_transfer/cm4" doc="readme.txt">
      <description>The flexio_i2c_read_accel_value example shows how to use FLEXIO I2C  Master driver to communicate with an i2c device: 1. How to use the flexio i2c master driver to read a i2c device who_am_I register. 2. How to use the flexio i2c master driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_i2c_read_accel_value_transfer_cm4.uvprojx"/>
        <environment name="iar" load="iar/flexio_i2c_read_accel_value_transfer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_pwm_cm4" folder="driver_examples/flexio/pwm/cm4" doc="readme.txt">
      <description>This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by "DEMO_FLEXIO_FREQUENCY" in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_pwm_cm4.uvprojx"/>
        <environment name="iar" load="iar/flexio_pwm_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_spi_edma_lpspi_transfer_master_cm4" folder="driver_examples/flexio/spi/edma_lpspi_transfer/master/cm4" doc="readme.txt">
      <description>The flexio_spi_master_edma_lpspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a lpspi slave .</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_spi_edma_lpspi_transfer_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/flexio_spi_edma_lpspi_transfer_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_spi_edma_lpspi_transfer_slave_cm4" folder="driver_examples/flexio/spi/edma_lpspi_transfer/slave/cm4" doc="readme.txt">
      <description>The flexio_spi_slave_edma_lpspi_master example shows how to use flexio spi slave driver in edma way:In this example, a flexio simulated slave connect to a lpspi master.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_spi_edma_lpspi_transfer_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/flexio_spi_edma_lpspi_transfer_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_spi_int_lpspi_transfer_master_cm4" folder="driver_examples/flexio/spi/int_lpspi_transfer/master/cm4" doc="readme.txt">
      <description>The flexio_spi_master_interrupt_lpspi_slave example shows how to use flexio spi master driver in interrupt way. In this example, a flexio simulated master connect to a lpspi slave .</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_spi_int_lpspi_transfer_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/flexio_spi_int_lpspi_transfer_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_spi_int_lpspi_transfer_slave_cm4" folder="driver_examples/flexio/spi/int_lpspi_transfer/slave/cm4" doc="readme.txt">
      <description>The flexio_spi_slave_interrupt_lpspi_master example shows how to use flexio spi slave driver in interrupt way. In this example, a flexio simulated slave connect to a lpspi master.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_spi_int_lpspi_transfer_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/flexio_spi_int_lpspi_transfer_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_uart_edma_transfer_cm4" folder="driver_examples/flexio/uart/edma_transfer/cm4" doc="readme.txt">
      <description>The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_uart_edma_transfer_cm4.uvprojx"/>
        <environment name="iar" load="iar/flexio_uart_edma_transfer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_uart_int_rb_transfer_cm4" folder="driver_examples/flexio/uart/int_rb_transfer/cm4" doc="readme.txt">
      <description>The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_uart_int_rb_transfer_cm4.uvprojx"/>
        <environment name="iar" load="iar/flexio_uart_int_rb_transfer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_uart_interrupt_transfer_cm4" folder="driver_examples/flexio/uart/interrupt_transfer/cm4" doc="readme.txt">
      <description>The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_uart_interrupt_transfer_cm4.uvprojx"/>
        <environment name="iar" load="iar/flexio_uart_interrupt_transfer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexio_uart_polling_transfer_cm4" folder="driver_examples/flexio/uart/polling_transfer/cm4" doc="readme.txt">
      <description>The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexio_uart_polling_transfer_cm4.uvprojx"/>
        <environment name="iar" load="iar/flexio_uart_polling_transfer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="gpio_input_interrupt_cm4" folder="driver_examples/gpio/input_interrupt/cm4" doc="readme.txt">
      <description>The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/gpio_input_interrupt_cm4.uvprojx"/>
        <environment name="iar" load="iar/gpio_input_interrupt_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="gpio_led_output_cm4" folder="driver_examples/gpio/led_output/cm4" doc="readme.txt">
      <description>The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/gpio_led_output_cm4.uvprojx"/>
        <environment name="iar" load="iar/gpio_led_output_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="hello_world_demo_cm4" folder="demo_apps/hello_world/cm4" doc="readme.txt">
      <description>The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the "Hello World" string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/hello_world_demo_cm4.uvprojx"/>
        <environment name="iar" load="iar/hello_world_demo_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpadc_interrupt_cm4" folder="driver_examples/lpadc/interrupt/cm4" doc="readme.txt">
      <description>The lpdc_single_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpadc_interrupt_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpadc_interrupt_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpadc_polling_cm4" folder="driver_examples/lpadc/polling/cm4" doc="readme.txt">
      <description>The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpadc_polling_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpadc_polling_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpcmp_interrupt_cm4" folder="driver_examples/lpcmp/interrupt/cm4" doc="readme.txt">
      <description>The LPCMP interrupt Example shows how to use interrupt with LPCMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the LPCMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any LPCMP interrupt happens, the LPCMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpcmp_interrupt_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpcmp_interrupt_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpcmp_polling_cm4" folder="driver_examples/lpcmp/polling/cm4" doc="readme.txt">
      <description>The LPCMP polling Example shows the simplest way to use LPCMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the LPCMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpcmp_polling_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpcmp_polling_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_edma_b2b_transfer_master_cm4" folder="driver_examples/lpi2c/edma_b2b_transfer/master/cm4" doc="readme.txt">
      <description>The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_edma_b2b_transfer_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_edma_b2b_transfer_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_edma_b2b_transfer_slave_cm4" folder="driver_examples/lpi2c/edma_b2b_transfer/slave/cm4" doc="readme.txt">
      <description>The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_edma_b2b_transfer_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_edma_b2b_transfer_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_interrupt_cm4" folder="driver_examples/lpi2c/interrupt/cm4" doc="readme.txt">
      <description>The lpi2c_functional_interrupt example shows how to use lpi2c functional driver to build a interrupt based application:In this example , one lpi2c instance used as lpi2c master and another lpi2c instance used as lpi2c slave .1. lpi2c master send data using interrupt to lpi2c slave in interrupt .2. lpi2c master read data using interrupt from lpi2c slave in interrupt .3. The example assumes that the connection is OK between master and slave, so there's NO error handling code.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_interrupt_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_interrupt_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_interrupt_b2b_transfer_master_cm4" folder="driver_examples/lpi2c/interrupt_b2b_transfer/master/cm4" doc="readme.txt">
      <description>The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_interrupt_b2b_transfer_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_interrupt_b2b_transfer_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_interrupt_b2b_transfer_slave_cm4" folder="driver_examples/lpi2c/interrupt_b2b_transfer/slave/cm4" doc="readme.txt">
      <description>The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_interrupt_b2b_transfer_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_interrupt_b2b_transfer_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_polling_b2b_transfer_master_cm4" folder="driver_examples/lpi2c/polling_b2b_transfer/master/cm4" doc="readme.txt">
      <description>The lpi2c_polling_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_polling_b2b_transfer_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_polling_b2b_transfer_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_polling_b2b_transfer_slave_cm4" folder="driver_examples/lpi2c/polling_b2b_transfer/slave/cm4" doc="readme.txt">
      <description>The lpi2c_polling_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_polling_b2b_transfer_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_polling_b2b_transfer_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpi2c_read_accel_value_transfer_cm4" folder="driver_examples/lpi2c/read_accel_value_transfer/cm4" doc="readme.txt">
      <description>The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpi2c_read_accel_value_transfer_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpi2c_read_accel_value_transfer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpit_cm4" folder="driver_examples/lpit/cm4" doc="readme.txt">
      <description>The LPIT project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpit_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpit_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_edma_b2b_transfer_master_cm4" folder="driver_examples/lpspi/edma_b2b_transfer/master/cm4" doc="readme.txt">
      <description>The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_edma_b2b_transfer_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpspi_edma_b2b_transfer_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_edma_b2b_transfer_slave_cm4" folder="driver_examples/lpspi/edma_b2b_transfer/slave/cm4" doc="readme.txt">
      <description>The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_edma_b2b_transfer_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpspi_edma_b2b_transfer_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_interrupt_cm4" folder="driver_examples/lpspi/interrupt/cm4" doc="readme.txt">
      <description>The lpspi_functional_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave .1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_interrupt_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpspi_interrupt_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_interrupt_b2b_master_cm4" folder="driver_examples/lpspi/interrupt_b2b/master/cm4" doc="readme.txt">
      <description>The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_interrupt_b2b_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpspi_interrupt_b2b_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_interrupt_b2b_slave_cm4" folder="driver_examples/lpspi/interrupt_b2b/slave/cm4" doc="readme.txt">
      <description>The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_interrupt_b2b_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpspi_interrupt_b2b_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_interrupt_b2b_transfer_master_cm4" folder="driver_examples/lpspi/interrupt_b2b_transfer/master/cm4" doc="readme.txt">
      <description>The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_interrupt_b2b_transfer_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpspi_interrupt_b2b_transfer_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_interrupt_b2b_transfer_slave_cm4" folder="driver_examples/lpspi/interrupt_b2b_transfer/slave/cm4" doc="readme.txt">
      <description>The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_interrupt_b2b_transfer_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpspi_interrupt_b2b_transfer_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_polling_b2b_transfer_master_cm4" folder="driver_examples/lpspi/polling_b2b_transfer/master/cm4" doc="readme.txt">
      <description>The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_polling_b2b_transfer_master_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpspi_polling_b2b_transfer_master_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpspi_polling_b2b_transfer_slave_cm4" folder="driver_examples/lpspi/polling_b2b_transfer/slave/cm4" doc="readme.txt">
      <description>The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpspi_polling_b2b_transfer_slave_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpspi_polling_b2b_transfer_slave_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lptmr_cm4" folder="driver_examples/lptmr/cm4" doc="readme.txt">
      <description>The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lptmr_cm4.uvprojx"/>
        <environment name="iar" load="iar/lptmr_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_edma_transfer_cm4" folder="driver_examples/lpuart/edma_transfer/cm4" doc="readme.txt">
      <description>The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_edma_transfer_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpuart_edma_transfer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_interrupt_cm4" folder="driver_examples/lpuart/interrupt/cm4" doc="readme.txt">
      <description>The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_interrupt_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpuart_interrupt_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_interrupt_rb_transfer_cm4" folder="driver_examples/lpuart/interrupt_rb_transfer/cm4" doc="readme.txt">
      <description>The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_interrupt_rb_transfer_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpuart_interrupt_rb_transfer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_interrupt_transfer_cm4" folder="driver_examples/lpuart/interrupt_transfer/cm4" doc="readme.txt">
      <description>The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_interrupt_transfer_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpuart_interrupt_transfer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_interrupt_transfer_seven_bits_cm4" folder="driver_examples/lpuart/interrupt_transfer_seven_bits/cm4" doc="readme.txt">
      <description>The lpuart_interrupt_transfer_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.NOTE: Please set com port format to "7 data bits without parity bit" in PC's com port tool</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_interrupt_transfer_seven_bits_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpuart_interrupt_transfer_seven_bits_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_polling_cm4" folder="driver_examples/lpuart/polling/cm4" doc="readme.txt">
      <description>The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_polling_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpuart_polling_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpuart_polling_seven_bits_cm4" folder="driver_examples/lpuart/polling_seven_bits/cm4" doc="readme.txt">
      <description>The lpuart_polling_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console instantly.NOTE: Please set com port format to "7 data bits without parity bit" in PC's com port tool</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpuart_polling_seven_bits_cm4.uvprojx"/>
        <environment name="iar" load="iar/lpuart_polling_seven_bits_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mu_interrupt_core0" folder="driver_examples/mu/interrupt/core0" doc="readme.txt">
      <description>The mu_interrupt example shows how to use MU driver in interrupt way:In this example:1. Core 0 send message to Core 1 in interrupt mode via MU module.2. Core 1 send message back to Core 0 in interrupt mode.3. Core 0 receive message sent from Core 1 in interrupt mode.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mu_interrupt_core0.uvprojx"/>
        <environment name="iar" load="iar/mu_interrupt_core0.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mu_polling_core0" folder="driver_examples/mu/polling/core0" doc="readme.txt">
      <description>The mu_polling example shows how to use MU driver in polling way:In this example:1. Core 0 send message to Core 1 in polling mode via MU module.2. Core 1 send message back to Core 0 in polling mode.3. Core 0 receive message sent from Core 1 in polling mode.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mu_polling_core0.uvprojx"/>
        <environment name="iar" load="iar/mu_polling_core0.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="pflash_cm4" folder="driver_examples/flash/pflash/cm4" doc="readme.txt">
      <description>The pflash example shows how to use flash driver to operate program flash:</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/pflash_cm4.uvprojx"/>
        <environment name="iar" load="iar/pflash_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="power_mode_switch_cm4" folder="demo_apps/power_mode_switch/cm4" doc="readme.txt">
      <description>The IEE IEER MMDC demo application demonstrates usage of the IEE and IEER driver. The Inline Encryption Engine (IEE) together with Inline Encryption Engine Router (IEER) provides a means to perform inline encryption and decryption of information transferred over external memory interfaces. In this demo application encrypted read and write is performed to external DDR Ram using MMDC. At first IEE is configured to perform AES XTS encryprion/decryption using KEY1 &amp; KEY2 for region 3 (highest priority region). Offset setting for region 3 is calculated using IEE_GetOffset() function. IEE uses offset to determine the physical address of the memory location that you are accessing. Offset is added to IEE address when performing read or write access to IEE. Then IEER is set to cover all its address space for region 3. Now all data written/read to/from IEE address will be encrypted/decrypted and written/read to/from physical DDR memory. Then test data are written over IEE to DDR. After the successful write, data are read directly from the DDR (without using IEE) to see that they are crypted. Then read using IEE is performed and the data are compared to written data in the begining of this demo.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/power_mode_switch_cm4.uvprojx"/>
        <environment name="iar" load="iar/power_mode_switch_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="rtc_cm4" folder="driver_examples/rtc/cm4" doc="readme.txt">
      <description>The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/rtc_cm4.uvprojx"/>
        <environment name="iar" load="iar/rtc_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="rtc_func_cm4" folder="demo_apps/rtc_func/cm4" doc="readme.txt">
      <description>The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/rtc_func_cm4.uvprojx"/>
        <environment name="iar" load="iar/rtc_func_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="sema42_dual_core_core0" folder="driver_examples/sema42/dual_core/core0" doc="readme.txt">
      <description>The sema42 example shows how to use SEMA42 driver to lock and unlock a sema gate:In this example:1. Firstly, Core 0 turn on LED  and lock a sema gate then boot up Core 1 wake up.2. Core 1 must be wait until Core 0 unlocks this sema gate to lock it.3. After user press any key in terminal window, the sema gate will be unlocked by core 0,then core 1 will lock it and turn off the LEDIf the board does not have LED to show the status, then core 1 will send a flagto core 0 when core 1 has locked the sema gate. Core 0 outputs the success logafter it received the flag.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/sema42_dual_core_core0.uvprojx"/>
        <environment name="iar" load="iar/sema42_dual_core_core0.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="shell_cm4" folder="demo_apps/shell/cm4" doc="readme.txt">
      <description>The Shell Demo application demonstrates to control Leds by commands.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/shell_cm4.uvprojx"/>
        <environment name="iar" load="iar/shell_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_combine_pwm_cm4" folder="driver_examples/tpm/combine_pwm/cm4" doc="readme.txt">
      <description>The TPM project is a demonstration program of generating a combined PWM signal by the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The example also show's the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the TPM pins, the user will seea change in LED brightness if user enter different values.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_combine_pwm_cm4.uvprojx"/>
        <environment name="iar" load="iar/tpm_combine_pwm_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_dual_edge_capture_cm4" folder="driver_examples/tpm/dual_edge_capture/cm4" doc="readme.txt">
      <description>The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_dual_edge_capture_cm4.uvprojx"/>
        <environment name="iar" load="iar/tpm_dual_edge_capture_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_input_capture_cm4" folder="driver_examples/tpm/input_capture/cm4" doc="readme.txt">
      <description>The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_input_capture_cm4.uvprojx"/>
        <environment name="iar" load="iar/tpm_input_capture_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_output_compare_cm4" folder="driver_examples/tpm/output_compare/cm4" doc="readme.txt">
      <description>The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_output_compare_cm4.uvprojx"/>
        <environment name="iar" load="iar/tpm_output_compare_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_pwm_twochannel_cm4" folder="driver_examples/tpm/pwm_twochannel/cm4" doc="readme.txt">
      <description>The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_pwm_twochannel_cm4.uvprojx"/>
        <environment name="iar" load="iar/tpm_pwm_twochannel_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_simple_pwm_cm4" folder="driver_examples/tpm/simple_pwm/cm4" doc="readme.txt">
      <description>The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_simple_pwm_cm4.uvprojx"/>
        <environment name="iar" load="iar/tpm_simple_pwm_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tpm_timer_cm4" folder="driver_examples/tpm/timer/cm4" doc="readme.txt">
      <description>The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tpm_timer_cm4.uvprojx"/>
        <environment name="iar" load="iar/tpm_timer_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="trng_random_cm4" folder="driver_examples/trng/random/cm4" doc="readme.txt">
      <description>The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/trng_random_cm4.uvprojx"/>
        <environment name="iar" load="iar/trng_random_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="tstmr_cm4" folder="driver_examples/tstmr/cm4" doc="readme.txt">
      <description>The tstmr example shows the usage of TSTMR driver in application. The TSTMR module is a free running incrementing counter that starts running after system reset de-assertion and can be read at any time by the software for determining the software ticks.The TSTMR runs off the 1 MHz clock and resets on every system reset.In this example, it would output a time stamp information when the application is ready. And then, delay for 1 second with TSTMR_DelayUs() function. Before and after the delay, it would output the two time stamps information again.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/tstmr_cm4.uvprojx"/>
        <environment name="iar" load="iar/tstmr_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="wdog32_cm4" folder="driver_examples/wdog32/cm4" doc="readme.txt">
      <description>The WDOG32 Example project is to demonstrate usage of the KSDK wdog32 driver.In this example, fast testing is first implemented to test the wdog32.After this, refreshing the watchdog in None-window mode and window mode is executed.Note wdog32 is disabled in SystemInit function which means wdog32 is disabledafter chip emerges from reset.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/wdog32_cm4.uvprojx"/>
        <environment name="iar" load="iar/wdog32_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="xrdc_cm4" folder="driver_examples/xrdc/cm4" doc="readme.txt">
      <description>The xrdc example shows how to control the memory and peripheral accesspolicy using XRDC.In this example, one peripheral and a memory region are set to unaccessible, thenthe hardfault occurs.</description>
      <board name="FRDM-K32L3A6" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/xrdc_cm4.uvprojx"/>
        <environment name="iar" load="iar/xrdc_cm4.ewp"/>
      </project>
      <attributes/>
    </example>
  </examples>
  <components>
    <component Cclass="Board Support" Cgroup="SDK Project Template" Csub="project_template" Cvariant="frdmk32l3a6" Cversion="1.0.0" condition="device.K32L3A60_AND_component.lpuart_adapter_AND_component.serial_manager_uart_AND_device.K32L3A60_startup_AND_driver.clock_AND_driver.common_AND_driver.gpio_AND_driver.lpuart_AND_driver.msmc_AND_driver.port_AND_utility.assert_AND_utility.debug_console">
      <description/>
      <files>
        <file category="sourceC" attr="config" name="project_template/board.c"/>
        <file category="header" attr="config" name="project_template/board.h"/>
        <file category="sourceC" attr="config" name="project_template/clock_config.c"/>
        <file category="header" attr="config" name="project_template/clock_config.h"/>
        <file category="sourceC" attr="config" name="project_template/peripherals.c"/>
        <file category="header" attr="config" name="project_template/peripherals.h"/>
        <file category="sourceC" attr="config" name="project_template/pin_mux.c"/>
        <file category="header" attr="config" name="project_template/pin_mux.h"/>
      </files>
    </component>
  </components>
</package>
